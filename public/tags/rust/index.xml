<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>rust on Atharva Pandey</title><link>https://atharvapandey.com/tags/rust/</link><description>Recent content in rust on Atharva Pandey</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><copyright>Copyright ©</copyright><lastBuildDate>Thu, 29 Feb 2024 18:30:00 +0000</lastBuildDate><atom:link href="https://atharvapandey.com/tags/rust/index.xml" rel="self" type="application/rss+xml"/><item><title>Mastering Rust: The Complete Guide to Pattern Matching</title><link>https://atharvapandey.com/post/rust/mastering-rust-the-complete-guide-to-pattern-matching/</link><pubDate>Thu, 29 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/mastering-rust-the-complete-guide-to-pattern-matching/</guid><description>Looking to take your Rust skills to the next level? Master the art of pattern matching, one of Rust&amp;rsquo;s most versatile features! This beginner-friendly guide dives into the key concepts with clear examples, helping you:
Understand the basics of advanced pattern matching in Rust. Apply these techniques to write cleaner, more efficient code. Avoid common pitfalls and best practices to follow. 1. Basics of Pattern Matching 1.1 What is Pattern Matching?</description></item><item><title>Traits: Mastering Traits in Rust — Navigating Edge Cases and Best Practices (Part 3)</title><link>https://atharvapandey.com/post/rust/traits-mastering-traits-in-rustnavigating-edge-cases-and-best-practices-part3/</link><pubDate>Thu, 29 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/traits-mastering-traits-in-rustnavigating-edge-cases-and-best-practices-part3/</guid><description>Hello again, Rust enthusiasts! We’ve journeyed through the foundational concepts and dived into the advanced territories of Rust’s trait system in our previous posts.
Today, we’re at the final frontier, ready to tackle the intricacies of mastering traits in Rust. This installment is all about navigating through edge cases, understanding best practices, and making the most out of Rust’s powerful trait system. So, let’s get started and wrap up our series with a deep dive into the art of mastering Rust traits.</description></item><item><title>From Novice to Master: 10 Must-Try Low-Level Programming Projects in Rust</title><link>https://atharvapandey.com/post/rust/from-novice-to-master-10-must-try-low-level-programming-projects-in-rust/</link><pubDate>Wed, 28 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/from-novice-to-master-10-must-try-low-level-programming-projects-in-rust/</guid><description>Hey there! If you’ve been following along, you know we’ve been deep-diving into Rust, exploring its nooks and crannies. This time around, I’m switching gears to something more hands-on. I want to walk you through a curated list of projects that have not only sharpened my skills but promise to elevate yours from beginner to pro.
1. Building a Guessing Game with a Twist Alright, let&amp;rsquo;s dive into something that&amp;rsquo;s simple at first glance but has layers to peel back—a guessing game, but not just any guessing game.</description></item><item><title>Traits: Advanced Trait Concepts and Dynamic Dispatch in Rust (Part 2)</title><link>https://atharvapandey.com/post/rust/traits-part2-advance-trait-concepts/</link><pubDate>Wed, 28 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/traits-part2-advance-trait-concepts/</guid><description>Trait Objects and Dynamic Dispatch In Rust, polymorphism achieved through traits can take two forms: static and dynamic dispatch. Static dispatch is like knowing exactly what tool you’re going to use for a job, making it fast and efficient. Dynamic dispatch, on the other hand, is more flexible, allowing you to choose the right tool while the job is already underway.
Understanding Trait Objects and dyn Keyword Trait objects with the dyn keyword allow for this kind of runtime flexibility.</description></item><item><title>Traits: Understanding Rust Traits  - The Foundation (Part 1)</title><link>https://atharvapandey.com/post/rust/traits-understanding-rust-traitsthe-foundation-part1/</link><pubDate>Wed, 28 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/traits-understanding-rust-traitsthe-foundation-part1/</guid><description>Welcome, fellow Rustaceans and curious minds! Today, we embark on the first installment of our series designed to explore Rust’s powerful trait system. Traits are at the heart of Rust’s type system, offering a flexible way to define shared behavior. In this post, we’ll lay the foundation, exploring what traits are, how they’re used, and why they’re so integral to Rust programming. Grab a cup of your favorite brew, and let’s dive in!</description></item><item><title>Mastering Rust Lifetimes: The Comprehensive Guide</title><link>https://atharvapandey.com/post/rust/mastering-rust-lifetimes-the-comprehensive-guide/</link><pubDate>Fri, 23 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/mastering-rust-lifetimes-the-comprehensive-guide/</guid><description>Mastering Rust Lifetimes: The Comprehensive Guide
Understanding lifetimes in Rust is crucial for any Rustacean aiming to write safe and efficient code. Lifetimes are Rust&amp;rsquo;s unique approach to managing memory without a garbage collector, ensuring memory safety and eliminating data races. This guide will take you from the basics to more nuanced aspects of lifetimes, with plenty of examples to solidify your understanding.
Part 1: The Foundations of Lifetimes What Are Lifetimes?</description></item><item><title>Rust Ultimate: The Ultimate Rust Cheatsheet You'll Ever Need</title><link>https://atharvapandey.com/post/rust/rust-ultimate-the-ultimate-rust-cheatsheet-youll-ever-need/</link><pubDate>Tue, 20 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/rust-ultimate-the-ultimate-rust-cheatsheet-youll-ever-need/</guid><description>Whether you&amp;rsquo;re a seasoned developer juggling multiple programming languages or a newcomer to Rust, it&amp;rsquo;s not uncommon to hit a roadblock trying to recall specific syntax or optimize your code with Rust&amp;rsquo;s powerful features. This comprehensive Rust cheatsheet is designed to be your go-to reference, enabling you to harness Rust&amp;rsquo;s capabilities fully without getting slowed down by syntax uncertainties.
Vector &amp;amp; LinkedList Operations Rust&amp;rsquo;s Vec&amp;lt;T&amp;gt; and LinkedList&amp;lt;T&amp;gt; are versatile for handling collections.</description></item><item><title>Rust in Finance: Building a Scalable High-Frequency Trading Platform from Scratch</title><link>https://atharvapandey.com/post/rust/rust-in-finance-building-a-scalable-high-frequency-trading-platform-from-scratch.md/</link><pubDate>Fri, 16 Feb 2024 18:30:00 +0000</pubDate><guid>https://atharvapandey.com/post/rust/rust-in-finance-building-a-scalable-high-frequency-trading-platform-from-scratch.md/</guid><description>As I ventured deeper into the Rust ecosystem, I set my sights on a project that would not only challenge my technical acumen but also push the boundaries of software architecture — a high-frequency trading (HFT) platform. In the high-stakes world of high-frequency trading (HFT), where milliseconds can mean millions, the quest for the ultimate trading platform is relentless. With its relentless demand for speed, low latency and reliability, served as the perfect proving ground for my exploration into Rust’s capabilities and the architectural paradigms that would best harness them.</description></item></channel></rss>